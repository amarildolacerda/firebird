/* 
   Auth:  Amarildo Lacerda - amarildo.lacerda@storeware.com.br
   Subj:  Firebird procedures for DateUtils
   Date:  11/Jan/2016
 */


SET TERM ^ ;

-- cria um funcao isolada
/*
create or alter  function StartOfMonth(PDate date) returns date
     as
     begin
         return PDate - extract(day from PDate)+1;
     end^
*/


-- cria uma package para isolar os procedimento e funções
CREATE or ALTER  PACKAGE pkg_DateUtils
AS
begin
     procedure decodeDate(PDate date)  returns ( y double precision, m double precision, d double precision );
     procedure decodeTime (PDate date) returns (h integer, m integer, s integer);
     procedure encodeDate (y integer,m integer, d integer) returns ( data date);
     procedure encodeTime (h integer,m integer,s integer) returns ( hr char(9));
     function isLeapYear (PDate date) returns boolean;
     function endOfMonth(PDate date) returns date;
     function startOfMonth(PDate date) returns date;
     function dayOfTheWeek(PDate date) returns integer;
     function dayOfTheMonth ( PDate  date )  returns integer;
     function dayOfTheYear ( PDate  date ) returns integer;
     function monthOfTheYear ( PDate date ) returns integer;
     function addDays( PDay integer, PDate date) returns date;
     function addMonths( PMonth integer, PDate date) returns date;
     function addYears( PYear integer, PDate date) returns date;

end^

RECREATE PACKAGE BODY pkg_DateUtils
AS
begin

     function addYears( PYear integer, PDate date) returns date
     as
     begin
        return dateadd(year,PYear,PDate);
     end

     function addMonths( PMonth integer, PDate date) returns date
     as
     begin
        return dateadd(month, PMonth,PDate);
     end

     function addDays( PDay integer, PDate date) returns date
     as
     begin
       return dateadd(day, PDay,PDate);
     end


     function monthOfTheYear ( PDate date ) returns integer
     as
     begin
        return extract(month from PDate);
     end


     function dayOfTheYear ( PDate  date ) returns integer
     as
     begin
          return extract(yearday from PDate)+1;
     end


     function dayOfTheMonth ( PDate  date )  returns integer
     as
     begin
        return extract(day from PDate);
     end


     function dayOfTheWeek(PDate Date) returns integer
     as
     declare variable rt integer;
     begin
        rt = extract(weekday from PDate);
        if (rt=0) then
           return 7;    -- pascal style
        else
           return rt;
     end

     function startOfMonth(PDate date) returns date
     as
     begin
         return PDate - extract(day from PDate)+1;
     end

     function endOfMonth(PDate Date) returns Date
     as
     declare variable r date;
     begin
         --r = PDate - extract(day from PDate)+32;
         r = startOfMonth(PDate)+32;
         return r - extract(day from r);
     end

     function isLeapYear (PDate DATE) returns boolean
     AS
     declare variable y integer;
     declare variable rt boolean;
     begin
       rt = false;
       y = extract(year from PDate);
       if ((mod(y,4)=0) and
          ((mod(y,100)<>0) or
          (mod(y,400)=0))) then
          rt = true;
       return rt;
     end

     procedure decodeDate(PDate date)  returns  (y double precision, m double precision, d double precision)
     as
     begin
         d = EXTRACT( DAY FROM PDate);
         M = EXTRACT( MONTH FROM PDate);
         y = EXTRACT( YEAR FROM PDate);
        suspend;
     end

     procedure decodeTime (PDate date) returns (h integer, m integer, s integer)
     as
     begin
       h = EXTRACT( HOUR FROM PDate);
       m = EXTRACT( MINUTE FROM PDate);
       s = EXTRACT( SECOND FROM PDate);
       suspend;
     end


     procedure encodeDate (y integer,m integer, d integer) returns ( data date)
     as
     begin
       data = CAST( CAST(m AS CHAR(2))||'/'||CAST(d AS CHAR(2))||'/'||CAST(y AS CHAR(4)) AS DATE);
       suspend;
     end


     procedure encodeTime (h integer,m integer,s integer) returns ( hr char(9))
     as
     declare variable rh varchar(2);
     declare variable rm varchar(2);
     declare variable rs varchar(2);
     begin
        rh = substring(cast(100+h as varchar(3)) from 2 for 2);
        rm = substring(cast(100+m as varchar(3)) from 2 for 2);
        rs = substring(cast(100+s as varchar(3)) from 2 for 2);
        hr   =  rh||':'||rm||':'||rs;
        suspend;
     end



end^

SET TERM ; ^

commit work;



-----------------------------------------------------------------
-- PKG_DateUtils  Unit Tests
-----------------------------------------------------------------
create or alter  exception test_Error 'Error: ';

SET TERM ^ ;

execute block
as
declare variable dt date;
declare variable y double precision;
declare variable m double precision ;
declare variable d double precision ;
declare variable h integer ;
declare variable s integer ;
declare variable rs varchar(50);
declare variable b boolean;
begin

    --addYears
    dt = pkg_dateutils.addYears(10,cast('01/01/2016' as date));
    if (dt<>cast('01/01/2026' as date)) then
       exception test_error 'Falhou addYears positivo '||dt;

    --addMonths
    dt = pkg_dateutils.addMonths(10,cast('01/01/2016' as date));
    if (dt<>cast('11/01/2016' as date)) then
       exception test_error 'Falhou addMonths positivo '||dt;

    --addDays
    dt = pkg_dateutils.addDays(10,cast('01/01/2016' as date));
    if (dt<>cast('01/11/2016' as date)) then
       exception test_error 'Falhou addDays positivo '||dt;
    dt = pkg_dateutils.addDays(-10,cast('01/15/2016' as date));
    if (dt<>cast('01/05/2016' as date)) then
       exception test_error 'Falhou addDays negativo '||dt;

    --monthOfTheYear
    h = pkg_dateutils.monthOfTheYear(cast('10/29/2005' as date));
    if (h<>10) then
       exception test_error 'Falhou monthOfTheYear '||h;


    --dayOfTheYear
    h = pkg_dateutils.dayOfTheYear(cast('10/29/2005' as date));
    if (h<>302) then
       exception test_error 'Falhou dayOfTheYear '||h;
    h = pkg_dateutils.dayOfTheYear(cast('01/01/2016' as date));
    if (h<>1) then
       exception test_error 'Falhou dayOfTheYear '||h;



    --dayOfTheMonth
    h = pkg_dateutils.dayOfTheMonth(cast('01/14/2016' as date));
    if (h<>14) then
       exception test_error 'Falhou dayOfTheMonth '||h;


    -- dayOfTheWeek
    h = pkg_dateutils.dayOfTheWeek(cast('01/14/2016' as date));
    if (h<>4) then
       exception test_error 'Falhou dayOfTheWeek ';

    -- StartOfMonth
    dt = pkg_dateutils.StartOfMonth( cast('01/13/2016' as date) );
    if (dt<>cast('01/01/2016' as date)) then
       exception test_error 'Nao calculou StartOfMonth '||:dt;

    -- EndOfMonth
    dt = pkg_dateutils.endOfMonth( cast('01/01/2016' as date) );
    if (dt<>cast('01/31/2016' as date)) then
       exception test_error 'Nao calculou EndOfMonth '||:dt;

    -- teste isLeapYear
    select PKG_DateUtils.isLeapYear(cast('01/01/2016' as date)) from rdb$database
    into :b;
    if (:b = false) then
       exception test_error 'Falhou IsLeepYear para 2016';

    -- test DecodeDate
    dt = cast('now' as date);
    select y,m,d from PKG_DateUtils.DecodeDate( :dt )
    into :y,:m,:d;
    if (:y <> extract(year from :dt)) then
       exception test_Error 'DecodeDate Year';
    if (:m <> extract(month from :dt)) then
       exception test_Error 'DecodeDate Month';
    if (:d <> extract(day from :dt)) then
       exception test_Error 'DecodeDate Day';


    -- test  DecodeTime
    select h,m,s from PKG_DateUtils.DecodeTime( :dt )
    into :h,:m,:s;
    if (:h <> extract(hour from :dt)) then
       exception test_Error 'DecodeTime Hour';
    if (:m <> extract(minute from :dt)) then
       exception test_Error 'DecodeTime Minute';
    if (:s <> cast(extract(second from :dt) as integer)) then
       exception test_Error 'DecodeTime Second '||extract(second from :dt)||' -> '||:s;

    -- test EncodeDate
    select data from PKG_DateUtils.encodeDate(2016,1,11)
    into :dt;
    if (:dt <> cast( '01/11/2016' as date)) then
       exception test_Error 'EncodeDate';


    -- test EncodeTime
    select hr from PKG_DateUtils.encodeTime(10,1,12)
    into :rs;
    if (:rs<>'10:01:12') then
       exception test_Error 'EncodeTime '||:rs;


    select  StartOfMonth(  cast('01/10/2016' as date) ) from RDB$Database
    into :dt;
    if (dt<>cast('01/01/2016' as date)) then
       exception test_error 'Nao calculou function StartOfMonth '||:dt;


end^


SET TERM ; ^



/* Existing privileges on this package */
GRANT EXECUTE ON PACKAGE PKG_DATEUTILS TO WBA;
GRANT EXECUTE ON PACKAGE PKG_DATEUTILS TO SYSDBA;
